schema {
  query:    RootQuery
  mutation: RootMutation
}

scalar DateTime

type RootQuery {
  document(title: String!): Document
  randomDocument:           Document
  revisions(last: Int):     RevisionConnection!
}

type RootMutation {
  createDocument(input: CreateDocumentInput!): Document!
  createRevision(input: CreateRevisionInput!): Revision!
}

type PageInfo {
  startCursor:     String
  endCursor:       String
  hasPreviousPage: Boolean!
  hasNextPage:     Boolean!
}

type Document {
  title:        String!
  lastRevision: Revision!
  revisions:    [Revision!]!
  createdAt:    DateTime!
  updatedAt:    DateTime!
}

type Revision {
  document:       Document!
  revisionNumber: Int!
  changelog:      String
  description:    String
  body:           String!
  createdAt:      DateTime!
  updatedAt:      DateTime!
}

type RevisionEdge {
  cursor: String!
  node:   Revision
}

type RevisionConnection {
  edges:    [RevisionEdge]
  nodes:    [Revision]
  pageInfo: PageInfo
}

input RevisionsInput {
  page:  Int!
  count: Int!
}

input CreateDocumentInput {
  title:       String!
  changelog:   String
  description: String
  body:        String!
}

input CreateRevisionInput {
  title:       String!
  changelog:   String
  description: String
  body:        String!
}
